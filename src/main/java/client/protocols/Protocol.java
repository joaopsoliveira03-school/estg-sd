package client.protocols;

import java.util.logging.Logger;

import org.json.JSONException;
import org.json.JSONObject;

import shared.enumerations.ConnectionType;

/**
 * This class represents a protocol for processing input in a specific connection type.
 */
public class Protocol {
  private static final Logger logger = Logger.getLogger(Protocol.class.getName());
  
  /**
   * Processes the input based on the given connection type.
   * 
   * @param connectionType The type of connection.
   * @param input The input to be processed.
   * @return The response generated by processing the input.
   */
  public static String processInput(ConnectionType connectionType, String input) {
    try {
      JSONObject json = new JSONObject(input);
      JSONObject response = new JSONObject();

      if (json.has("response")) {
        logger.info("Response Received (ignored): " + json.toString());
        return null;
      }

      if (!json.has("command")) {
        logger.severe("Invalid command received! " + input);
        response.put("response", "Invalid command!");
        return response.toString();
      }

      switch (json.getString("command")) {
        case "history":
          EventsHandler.receiveEvents(json);
          return null;
        case "message":
          EventsHandler.receiveMessage(json);
          return null;
        case "request":
          EventsHandler.receiveRequest(json);
          return null;
        case "requestAnswer":
          return EventsHandler.receiveAnswerRequest(json);
        default:
          logger.severe("Invalid command received! " + input);
          return null;
      }
    } catch (JSONException json) {
      logger.severe("Invalid JSON received! " + json.getMessage());
      return null;
    }
  }
}
